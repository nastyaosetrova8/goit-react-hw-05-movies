{"version":3,"file":"static/js/681.423e5bc3.chunk.js","mappings":"yOAyDA,UApDgB,WACd,OAAsCA,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAiBR,OAfAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,oGAEjBN,GAAa,GAFI,UAGIO,EAAAA,EAAAA,IAAeJ,GAHnB,OAGXK,EAHW,OAIjBV,EAAeU,EAAOC,SAJL,gDAMjBP,EAAS,KAAMQ,SANE,yBAQjBV,GAAa,GARI,4EAAH,qDAWlBG,GAAWG,GACZ,GAAE,CAACH,KAGF,2BACGF,IACC,0BACE,yBAAG,sCAAoCA,OAG1CF,IACC,0BACE,SAAC,IAAD,OAIQ,OAAXF,QAAW,IAAXA,OAAA,EAAAA,EAAac,QAAS,GACrB,wBACGd,EAAYe,KAAI,SAAAC,GACf,OACE,2BACE,0BAAI,WAASA,EAAOC,WACpB,uBAAID,EAAOE,YAFJF,EAAOG,GAKnB,OAGH,uBAAG,gDAIV,C,yLCpDKC,E,QAAWC,EAAAA,OAAa,CAC1BC,QAAS,+BACTC,OAAO,CACHC,QAAS,sCAKJC,EAAqB,mCAAG,sGACZL,EAASM,IAAI,uBADD,uBAC1BC,EAD0B,EAC1BA,KAD0B,kBAE1BA,GAF0B,2CAAH,qDAKrBC,EAAkB,mCAAG,WAAOC,GAAP,yFACTT,EAASM,IAAT,8BAAoCG,IAD3B,uBACvBF,EADuB,EACvBA,KADuB,kBAEvBA,GAFuB,2CAAH,sDAKlBG,EAAmB,mCAAG,WAAOxB,GAAP,yFACVc,EAASM,IAAT,iBAAuBpB,IADb,uBACxBqB,EADwB,EACxBA,KADwB,kBAExBA,GAFwB,2CAAH,sDAKnBI,EAAc,mCAAG,WAAOzB,GAAP,yFACLc,EAASM,IAAT,iBAAuBpB,EAAvB,aADK,uBACnBqB,EADmB,EACnBA,KADmB,kBAEnBA,GAFmB,2CAAH,sDAKdjB,EAAc,mCAAG,WAAOJ,GAAP,yFACLc,EAASM,IAAT,iBAAuBpB,EAAvB,aADK,uBACnBqB,EADmB,EACnBA,KADmB,kBAEnBA,GAFmB,2CAAH,qD","sources":["components/Reviews.jsx","services/api.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { requestReviews } from 'services/api';\nimport Loader from './Loader/Loader';\nimport { useParams } from 'react-router-dom';\n\nconst Reviews = () => {\n  const [reviewsList, setReviewsList] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      try {\n        setIsLoading(true);\n        const rwList = await requestReviews(movieId);\n        setReviewsList(rwList.results);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    movieId && fetchReviews();\n  }, [movieId]);\n\n  return (\n    <div>\n      {error && (\n        <div>\n          <p>Opps, some error occured... Error: {error}</p>\n        </div>\n      )}\n      {isLoading && (\n        <div>\n          <Loader />\n        </div>\n      )}\n\n      {reviewsList?.length > 0 ? (\n        <ul>\n          {reviewsList.map(result => {\n            return (\n              <li key={result.id}>\n                <h3>Author: {result.author}</h3>\n                <p>{result.content}</p>\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <p>We don't have any reviews for this movie.</p>\n      )}\n    </div>\n  );\n};\n\nexport default Reviews;\n","import axios from \"axios\";\n\n\nconst instance = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n    params:{\n        api_key: 'e245788edd56336101811c52ff98db13',\n    }\n});\n\n\nexport const requestTrendingMovies = async () => {\n    const {data} = await instance.get('/trending/movie/day');\n    return data;\n}; \n\nexport const requestSearchMovie = async (query) => {\n    const {data} = await instance.get(`/search/movie?query=${query}`);\n    return data;\n}; \n\nexport const requestDetailsMovie = async (movieId) => {\n    const {data} = await instance.get(`/movie/${movieId}`);\n    return data;\n};\n\nexport const requestCredits = async (movieId) => {\n    const {data} = await instance.get(`/movie/${movieId}/credits`);\n    return data;\n};\n\nexport const requestReviews = async (movieId) => {\n    const {data} = await instance.get(`/movie/${movieId}/reviews`);\n    return data;\n};"],"names":["useState","reviewsList","setReviewsList","isLoading","setIsLoading","error","setError","movieId","useParams","useEffect","fetchReviews","requestReviews","rwList","results","message","length","map","result","author","content","id","instance","axios","baseURL","params","api_key","requestTrendingMovies","get","data","requestSearchMovie","query","requestDetailsMovie","requestCredits"],"sourceRoot":""}