{"version":3,"file":"static/js/597.891d8c87.chunk.js","mappings":"yOA6DA,UAvDa,WACX,OAAgCA,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAkBR,OAhBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,oGAEdN,GAAa,GAFC,UAGOO,EAAAA,EAAAA,IAAeJ,GAHtB,OAGRK,EAHQ,OAIdV,EAAYU,EAAOC,MAJL,gDAMdP,EAAS,KAAMQ,SAND,yBAQdV,GAAa,GARC,4EAAH,qDAYfM,GACD,GAAE,CAACH,KAGF,2BACGF,IACC,0BACE,yBAAG,sCAAoCA,OAG1CF,IACC,0BACE,SAAC,IAAD,OAIK,OAARF,QAAQ,IAARA,OAAA,EAAAA,EAAUc,QAAS,IAClB,wBACGd,EAASe,KAAI,SAAAH,GACZ,OACE,2BACE,gBACEI,IAAG,yCAAoCJ,EAAKK,cAC5CC,IAAKN,EAAKO,QAEZ,uBAAIP,EAAKO,QACT,yBAAG,cAAYP,EAAKQ,eANbR,EAAKS,GASjB,QAKV,C,yLCxDKC,E,QAAWC,EAAAA,OAAa,CAC1BC,QAAS,+BACTC,OAAO,CACHC,QAAS,sCAKJC,EAAqB,mCAAG,sGACZL,EAASM,IAAI,uBADD,uBAC1BC,EAD0B,EAC1BA,KAD0B,kBAE1BA,GAF0B,2CAAH,qDAKrBC,EAAkB,mCAAG,WAAOC,GAAP,yFACTT,EAASM,IAAT,8BAAoCG,IAD3B,uBACvBF,EADuB,EACvBA,KADuB,kBAEvBA,GAFuB,2CAAH,sDAKlBG,EAAmB,mCAAG,WAAO1B,GAAP,yFACVgB,EAASM,IAAT,iBAAuBtB,IADb,uBACxBuB,EADwB,EACxBA,KADwB,kBAExBA,GAFwB,2CAAH,sDAKnBnB,EAAc,mCAAG,WAAOJ,GAAP,yFACLgB,EAASM,IAAT,iBAAuBtB,EAAvB,aADK,uBACnBuB,EADmB,EACnBA,KADmB,kBAEnBA,GAFmB,2CAAH,sDAKdI,EAAc,mCAAG,WAAO3B,GAAP,yFACLgB,EAASM,IAAT,iBAAuBtB,EAAvB,aADK,uBACnBuB,EADmB,EACnBA,KADmB,kBAEnBA,GAFmB,2CAAH,qD","sources":["components/Cast.jsx","services/api.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { requestCredits } from 'services/api';\nimport Loader from './Loader/Loader';\nimport { useParams } from 'react-router-dom';\n\n\nconst Cast = () => {\n  const [castList, setCastList] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        setIsLoading(true);\n        const ctList = await requestCredits(movieId);\n        setCastList(ctList.cast);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    \n    fetchCast();\n  }, [movieId]);\n\n  return (\n    <div>\n      {error && (\n        <div>\n          <p>Opps, some error occured... Error: {error}</p>\n        </div>\n      )}\n      {isLoading && (\n        <div>\n          <Loader />\n        </div>\n      )}\n\n      {castList?.length > 0 && (\n        <ul>\n          {castList.map(cast => {\n            return (\n              <li key={cast.id}>\n                <img\n                  src={`https://image.tmdb.org/t/p/w200${cast.profile_path}`}\n                  alt={cast.name}\n                />\n                <p>{cast.name}</p>\n                <p>Character: {cast.character}</p>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default Cast;\n\n\n","import axios from \"axios\";\n\n\nconst instance = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n    params:{\n        api_key: 'e245788edd56336101811c52ff98db13',\n    }\n});\n\n\nexport const requestTrendingMovies = async () => {\n    const {data} = await instance.get('/trending/movie/day');\n    return data;\n}; \n\nexport const requestSearchMovie = async (query) => {\n    const {data} = await instance.get(`/search/movie?query=${query}`);\n    return data;\n}; \n\nexport const requestDetailsMovie = async (movieId) => {\n    const {data} = await instance.get(`/movie/${movieId}`);\n    return data;\n};\n\nexport const requestCredits = async (movieId) => {\n    const {data} = await instance.get(`/movie/${movieId}/credits`);\n    return data;\n};\n\nexport const requestReviews = async (movieId) => {\n    const {data} = await instance.get(`/movie/${movieId}/reviews`);\n    return data;\n};"],"names":["useState","castList","setCastList","isLoading","setIsLoading","error","setError","movieId","useParams","useEffect","fetchCast","requestCredits","ctList","cast","message","length","map","src","profile_path","alt","name","character","id","instance","axios","baseURL","params","api_key","requestTrendingMovies","get","data","requestSearchMovie","query","requestDetailsMovie","requestReviews"],"sourceRoot":""}